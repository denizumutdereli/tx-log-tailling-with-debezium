// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package authdb

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    account_id,
    email,
    phone,
    password,
    referral_user_id,
    referral_key,
    country,
    register_ip,
    register_device,
    status,
    g2fa_enabled,
    g2fa_secret,
    ban,
    last_login,
    last_login_raw
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, account_id, email, phone, password, referral_user_id, referral_key, country, register_ip, register_device, status, g2fa_enabled, g2fa_secret, ban, last_login, last_login_raw, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	AccountID      int64          `json:"account_id"`
	Email          string         `json:"email"`
	Phone          string         `json:"phone"`
	Password       string         `json:"password"`
	ReferralUserID sql.NullInt64  `json:"referral_user_id"`
	ReferralKey    sql.NullInt64  `json:"referral_key"`
	Country        string         `json:"country"`
	RegisterIp     string         `json:"register_ip"`
	RegisterDevice string         `json:"register_device"`
	Status         string         `json:"status"`
	G2faEnabled    bool           `json:"g2fa_enabled"`
	G2faSecret     sql.NullString `json:"g2fa_secret"`
	Ban            sql.NullTime   `json:"ban"`
	LastLogin      time.Time      `json:"last_login"`
	LastLoginRaw   string         `json:"last_login_raw"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.AccountID,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.ReferralUserID,
		arg.ReferralKey,
		arg.Country,
		arg.RegisterIp,
		arg.RegisterDevice,
		arg.Status,
		arg.G2faEnabled,
		arg.G2faSecret,
		arg.Ban,
		arg.LastLogin,
		arg.LastLoginRaw,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ReferralUserID,
		&i.ReferralKey,
		&i.Country,
		&i.RegisterIp,
		&i.RegisterDevice,
		&i.Status,
		&i.G2faEnabled,
		&i.G2faSecret,
		&i.Ban,
		&i.LastLogin,
		&i.LastLoginRaw,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUSer = `-- name: DeleteUSer :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUSer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUSer, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, account_id, email, phone, password, referral_user_id, referral_key, country, register_ip, register_device, status, g2fa_enabled, g2fa_secret, ban, last_login, last_login_raw, created_at, updated_at, deleted_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ReferralUserID,
		&i.ReferralKey,
		&i.Country,
		&i.RegisterIp,
		&i.RegisterDevice,
		&i.Status,
		&i.G2faEnabled,
		&i.G2faSecret,
		&i.Ban,
		&i.LastLogin,
		&i.LastLoginRaw,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, account_id, email, phone, password, referral_user_id, referral_key, country, register_ip, register_device, status, g2fa_enabled, g2fa_secret, ban, last_login, last_login_raw, created_at, updated_at, deleted_at FROM users
WHERE id = $1 LIMIT 1 FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ReferralUserID,
		&i.ReferralKey,
		&i.Country,
		&i.RegisterIp,
		&i.RegisterDevice,
		&i.Status,
		&i.G2faEnabled,
		&i.G2faSecret,
		&i.Ban,
		&i.LastLogin,
		&i.LastLoginRaw,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, account_id, email, phone, password, referral_user_id, referral_key, country, register_ip, register_device, status, g2fa_enabled, g2fa_secret, ban, last_login, last_login_raw, created_at, updated_at, deleted_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.ReferralUserID,
			&i.ReferralKey,
			&i.Country,
			&i.RegisterIp,
			&i.RegisterDevice,
			&i.Status,
			&i.G2faEnabled,
			&i.G2faSecret,
			&i.Ban,
			&i.LastLogin,
			&i.LastLoginRaw,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatUserStatus = `-- name: UpdatUserStatus :exec
UPDATE users SET status = $2
WHERE id = $1
`

type UpdatUserStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdatUserStatus(ctx context.Context, arg UpdatUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatUserStatus, arg.ID, arg.Status)
	return err
}
